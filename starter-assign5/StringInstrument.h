#pragma once

#include "GUI/SimpleTest.h"
#include "Demos/Sample.h"

/* Type representing a plucked string instrument. The string can be tuned
 * to a given frequency, plucked, and sampled to produce sound.
 */
class StringInstrument {
public:
    /* Constructs a new StringInstrument for a string that vibrates at
     * the given frequency. By default, the frequency is 440Hz (concert A),
     * but this can be chosen differently by the user.
     *
     * The 'explicit' keyword here is a Charming Fun Property of C++ and
     * says "you can't pretend that a real number is a StringInstrument,
     * but you can pass a real number as a constructor argument into a
     * StringInstrument. (Take CS106L for details!)
     */
    explicit StringInstrument(double frequency = 440.0);

    /* Cleans up all memory allocated by the StringInstrument. */
    ~StringInstrument();

    /* Plucks the string. */
    void pluck();

    /* Returns the next sound sample generated by the string. */
    Sample nextSample();

    /* These two special functions are called a copy constructor and
     * copy assignment operator. They're covered in detail in the
     * textbook (Ch 12.7) and in CS106L. Because we didn't cover these
     * functions in lecture, we provide working implementations for you
     * and you are not expected to understand how they work.
     */
    StringInstrument(const StringInstrument& rhs);
    StringInstrument& operator= (StringInstrument rhs);

    /* Detect any memory leaks where a StringInstrument was allocated but
     * then not deallocated.
     */
    TRACK_ALLOCATIONS_OF(StringInstrument);

private:
    /* Pointer to a buffer holding the waveform. */
    Sample* _waveform = nullptr;

    /* How many samples are in the waveform. */
    int _length;

    /* Where the cursor is within the array. */
    int _cursor;

    /* Give SimpleTest access to the private data members of this type so
     * that they can be inspected in tests.
     */
    ALLOW_TEST_ACCESS();
};
